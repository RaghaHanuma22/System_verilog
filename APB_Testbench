class transaction;
  
  rand bit [31:0] paddr;
  rand bit psel;
  rand bit penable;
  rand bit [7:0] pwdata;
  randc bit pwrite;
    
  bit [7:0] prdata;
  bit pready;
  bit pslverr;
  
  constraint addr_c {
  	paddr>=14; paddr<=20;
  }
  
   constraint data_c {
  	pwdata>=0; pwdata<=255;
  }
  
  function void display(input string tag);
    $display("[%0s] :  paddr:%0d  pwdata:%0d pwrite:%0b  prdata:%0d pslverr:%0b @ %0t",tag,paddr,pwdata, pwrite, prdata, pslverr,$time);
  endfunction
  
endclass

class generator;
  
  transaction tr;
  mailbox #(transaction) mbx;
  int count=0;
  event drvnext;
  event sconext;
  event done;
  
  function new (mailbox #(transaction) mbx);
    this.mbx=mbx;
    tr=new();
  endfunction
  
  task run();
    repeat(count) begin
      
      assert(tr.randomize()) else $display("[GEN]: Randomization failed!");
      mbx.put(tr);
      tr.display("GEN");
      @drvnext;
      @sconext;
    end
    ->done;
  endtask
  
endclass

class driver;
  transaction tr;
  mailbox #(transaction) mbx;
  event drvnext;
  virtual apb_if vif;
  function new (mailbox #(transaction) mbx);
    this.mbx=mbx;
  endfunction
  
  task reset();
    vif.psel<=0;
    vif.penable<=0;
    vif.pwdata<=0;
    vif.presetn<=0;
    vif.paddr<=0;
    vif.pwrite<=0;
    repeat(5) @(posedge vif.clk);
    vif.presetn<=1;
    $display("[DRV] : RESET DONE");
    $display("----------------------------------------------------------------------------");
  endtask
  
  task run();
    
    forever begin
      
      mbx.get(tr);
      @(posedge vif.clk);
      if(tr.pwrite == 1) begin
        vif.psel<=1;
        vif.penable<=0;
        vif.pwdata <= tr.pwdata;
        vif.paddr<=tr.paddr;
        vif.pwrite <=1;
        @(posedge vif.clk);
        vif.penable<=1;
        @(posedge vif.clk);
        vif.psel<=0;
        vif.penable<=0;
        vif.pwrite<=0;
        tr.display("DRV");
        ->drvnext;
        
      end
      
      else if(tr.pwrite == 0) begin
        vif.psel<=1;
        vif.penable<=0;
        vif.pwrite<=0;
        vif.paddr<=tr.paddr;
        @(posedge vif.clk);
        vif.penable<=1;
        @(posedge vif.clk);
        vif.psel <= 1'b0;
        vif.penable <= 1'b0;
        vif.pwrite <= 1'b0;
        tr.display("DRV"); 
        ->drvnext;
      end
      
    end
    
  endtask
  
endclass

class monitor;
  
  transaction tr;
  virtual apb_if vif;
  mailbox #(transaction) mbx;
  
   function new(mailbox #(transaction) mbx);
      this.mbx = mbx;     
   endfunction;
  
  task run();
    tr=new();
    forever begin
      @(posedge vif.clk);
      if(vif.pready) begin
        tr.paddr=vif.paddr;
        tr.pwdata=vif.pwdata;
        tr.prdata=vif.prdata;
        tr.pwrite=vif.pwrite;
        tr.pslverr = vif.pslverr;
        @(posedge vif.clk);
        mbx.put(tr);
        tr.display("MON");
        
      end
    end
    
  endtask
  
  
endclass

class scoreboard;
  
  transaction tr;
  virtual apb_if vif;
  event sconext;
  mailbox #(transaction) mbx;
  
   function new(mailbox #(transaction) mbx);
      this.mbx = mbx;     
   endfunction;
  
  int err=0;
  bit [7:0] pwdata[16] = '{default:0};
  bit [7:0] rdata;
  task run();
    
    forever begin
      mbx.get(tr);
      tr.display("SCO");
      if((tr.pwrite==1) && (tr.pslverr==0)) begin
        pwdata[tr.paddr] = tr.pwdata;
        $display("[SCO] : DATA STORED DATA : %0d ADDR: %0d",tr.pwdata, tr.paddr);
      end
      else if((tr.pwrite == 0) && (tr.pslverr ==0)) begin
        rdata=pwdata[tr.paddr];
        if(tr.prdata == rdata) begin
          $display("[SCO] : Data Matched"); 
        end
        else begin
        err++;
        $display("[SCO] : Data Mismatched");
        end
      end
      else if (tr.pslverr == 1 ) begin
        $display("[SCO] : SLV ERROR DETECTED");
      end
      $display("---------------------------------------------------------------------------------------------------");
      ->sconext;
      
    end
    
  endtask
  
endclass

class environment;
  
  generator gen;
  driver drv;
  monitor mon;
  scoreboard sco;
  
  event nextgd;
  event nextgs;
  
  mailbox #(transaction) gdmbx;
  mailbox #(transaction) msmbx;
  
  virtual apb_if vif;
  
  function new(virtual apb_if vif);
    
    gdmbx=new();
    msmbx=new();
    
    gen=new(gdmbx);
    drv=new(gdmbx);
    mon=new(msmbx);
    sco=new(msmbx);
    
    this.vif = vif;
    drv.vif = vif;
    mon.vif = vif;
    
    gen.drvnext = nextgd;
    drv.drvnext = nextgd;
    gen.sconext = nextgs;
    sco.sconext = nextgs;

  endfunction
  
  task pre_test();
    drv.reset();
  endtask
  
  task test();
    fork
      gen.run();
      drv.run();
      mon.run();
      sco.run();
    join_any
  endtask
  
  task post_test();
    wait(gen.done.triggered);
    $display("----Total number of Mismatch : %0d------",sco.err);
    $finish();
  endtask
  
  task run();
    pre_test();
    test();
    post_test();
  endtask
  
  
  
endclass

module tb;
  
  apb_if vif();
 
   
   apb_s dut (
   vif.clk,
   vif.presetn,
   vif.paddr,
   vif.psel,
   vif.penable,
   vif.pwdata,
   vif.pwrite,
   vif.prdata,
   vif.pready,
   vif.pslverr);
  
  initial begin
    vif.clk<=0;
  end
  
  always #10 vif.clk<=~vif.clk;
  
  environment env;
  
  initial begin
    env=new(vif);
    env.gen.count = 20;
    env.run();
    
  end
  
  initial begin
      $dumpfile("dump.vcd");
      $dumpvars;
    end
  
  
endmodule
