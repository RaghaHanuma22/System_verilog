class transaction;
  
  bit newd;
  rand bit [11:0] din;
  bit [11:0] dout;
  
  function transaction copy();
    copy=new();
    copy.newd=this.newd;
    copy.din=this.din;
    copy.dout=this.dout;
  endfunction
  
  
endclass

class generator;
  
  transaction tr;
  mailbox #(transaction) mbx;
  event done;
  event drvnext;
  event sconext;
  int count;
  function new(mailbox #(transaction) mbx);
  	
    this.mbx=mbx;
    tr=new();
  endfunction
  
  task run();
    
    repeat(count) begin
      
      assert(tr.randomize) else $display("[GEN]: Randomization failed");
      mbx.put(tr.copy);
       $display("[GEN] : din : %0d", tr.din); 
      //@(drvnext);
      @(sconext);
    end
    ->done;
  endtask
  
  
endclass

class driver;
  
  transaction tr;
  mailbox #(transaction) mbx;
  mailbox #(bit [11:0]) mbxds;
  virtual spi_if vif;
  event drvnext;
  bit [11:0] din;
  
  function new(mailbox #(transaction) mbx, mailbox #(bit [11:0]) mbxds);
        this.mbx=mbx;
  	this.mbxds=mbxds;

  endfunction
  
  task reset();
    
    vif.rst<=1;
    //vif.cs<=1;
    vif.din<=0;
    vif.newd<=0;
    //vif.mosi<=0;
    repeat(5) @(posedge vif.clk);
    vif.rst<=0;
    $display("[DRV]: RESET DONE!");
    $display("---------------------------");
    
  endtask
  
   task run();
    forever begin
      mbx.get(tr);            // Get a transaction from the mailbox
      vif.newd <= 1'b1;       // Set new data flag
      vif.din <= tr.din;      // Set data input
      mbxds.put(tr.din);      // Put data in the mailbox for the monitor
      @(posedge vif.sclk);
      vif.newd <= 1'b0;       // Clear new data flag
      @(posedge vif.done);
      $display("[DRV] : DATA SENT TO DAC : %0d",tr.din);
      @(posedge vif.sclk);
    end
    
  endtask
  
endclass

class monitor;
  
  transaction tr;
  mailbox #(bit [11:0]) mbxms;
  virtual spi_if vif;
  
  function new(mailbox #(bit [11:0]) mbxms);
  	this.mbxms=mbxms;
  endfunction
  
  task run();
    tr=new();
    forever begin
    
      @(posedge vif.sclk);
      @(posedge vif.done);
   	  tr.dout = vif.dout; 
      @(posedge vif.sclk);	
      $display("[MON] : DATA SENT : %0d", tr.dout);
      mbxms.put(tr.dout);
    end
  endtask
  
endclass

class scoreboard;
  mailbox #(bit [11:0]) mbxms,mbxds;
  event sconext;
  
  bit[11:0] ds;
  bit[11:0] ms;
  
  function new(mailbox #(bit [11:0]) mbxds, mailbox #(bit [11:0]) mbxms);
  	this.mbxds=mbxds;
    this.mbxms=mbxms;
  endfunction
  
  task run();
    //tr=new();
    forever begin
    
      mbxms.get(ms);
      mbxds.get(ds);
       $display("[SCO] : DRV : %0d MON : %0d", ds, ms);
      if(ds==ms)        
        $display("[SCO]: Data matched");
      else
        $display("[SCO]: Data mismatched");
      
      $display("---------------------------------------------------");
        ->sconext;
    end
  endtask
  
endclass



class environment;
  
  generator gen;
  driver drv;
  monitor mon;
  scoreboard sco;
  
  event nextgd;
  event nextgs;
  
  mailbox #(transaction) mbxgd;
  mailbox #(bit [11:0]) mbxms;
  mailbox #(bit [11:0]) mbxds;
  virtual spi_if vif;
  function new(virtual spi_if vif);
    
    mbxgd=new();
    mbxms=new();
    mbxds=new();
    gen=new(mbxgd);
    drv=new(mbxgd,mbxds);
    mon=new(mbxms);
    sco=new(mbxms,mbxds);
    
    this.vif=vif;
    drv.vif=this.vif;
    mon.vif=this.vif;
    
    gen.drvnext=nextgd;
    gen.sconext=nextgs;
    drv.drvnext=nextgd;
    sco.sconext=nextgs;
       
  endfunction
  
  task pre_test();
    drv.reset();
  endtask
  
  task test();
    fork
      gen.run();
      drv.run();
      mon.run();
      sco.run();
    join_any  
  endtask
  
  task post_test();
    
    wait(gen.done.triggered);
    $finish();
    
  endtask
  
  task run();
    
    pre_test();
    test();
    post_test();
    
  endtask
  
endclass

module tb;
  
  
  spi_if vif();
  top dut(vif.clk,vif.rst,vif.newd,vif.din,vif.dout,vif.done);
  
  initial begin
    vif.clk<=0;
  end
  
  environment env;
  always #10 vif.clk=~vif.clk;
  
  assign vif.sclk = dut.m1.sclk;
  
  initial begin
    
    env=new(vif);
    env.gen.count = 4;
    env.run();
  end
  
  initial begin
    $dumpfile("dump.vcd");
    $dumpvars;
  end
  
  
endmodule
