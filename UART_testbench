// Code your testbench here
// or browse Examples
class transaction;
  
  typedef enum bit {write=1'b0, read=1'b1} oper_type;
  randc oper_type oper;
  rand bit [7:0] dintx;
  
  bit rx,tx,newd,donetx,donerx;
  bit[7:0] doutrx;
  
  function transaction copy();
    copy=new();
    copy.oper=this.oper;
    copy.dintx=this.dintx;
    copy.rx=this.rx;
    copy.tx=this.tx;
    copy.newd=this.newd;
    copy.donetx=this.donetx;
    copy.donerx=this.donerx;
    copy.doutrx=this.doutrx;
  endfunction

endclass

class generator;
  transaction tr;
  event done;
  event sconext;
  event drvnext;
  mailbox #(transaction) mbx;
  int count=0;
  
  function new(mailbox #(transaction) mbx);
    this.mbx=mbx;
    tr=new();
  endfunction
  
  task run();
  repeat(count) begin
    assert(tr.randomize) else $display("[GEN]: Randomization failed");
    mbx.put(tr.copy);
    $display("[GEN]: The generated oper type: %0s, input: %0d",tr.oper.name(),tr.dintx);
    @(drvnext);
    @(sconext);
  end
  ->done;
  endtask
endclass

class driver;
  transaction tr;
  event drvnext;
  virtual uart_if vif;
  mailbox #(transaction) mbx;
  mailbox #(bit [7:0]) mbxds;
  
  bit [7:0] datarx;
  
  function new(mailbox #(transaction) mbx, mailbox #(bit [7:0]) mbxds);
    this.mbx=mbx;
    this.mbxds=mbxds;
  endfunction
  
  task reset();
    vif.rst<=1;
    vif.newd<=0;
    vif.dintx<=0;
    vif.rx<=1;
    repeat(5) @(posedge vif.clk);
    vif.rst<=0;
    $display("[DRV]: Reset Done");
    $display("--------------------------------");  
  endtask
  
  task run();
    forever begin
      mbx.get(tr);
      if(tr.oper==1'b0) begin
        @(posedge vif.uclktx);
        vif.newd<=1;
        vif.rst<=0;
        vif.rx<=1;
        vif.dintx<=tr.dintx;
        @(posedge vif.uclktx);
        vif.newd<=0;
        mbxds.put(tr.dintx);
        $display("[DRV]: Data sent is %0d",tr.dintx);
        wait(vif.donetx==1);
        ->drvnext;
      end
      else if(tr.oper==1'b1) begin
        @(posedge vif.uclkrx);
        vif.newd<=0;
        vif.rst<=0;
        vif.rx<=0;
        @(posedge vif.uclkrx);
        for(int i=0; i<=7;i++)begin
          @(posedge vif.uclkrx);
          vif.rx<=$urandom;
          datarx[i]=vif.rx; //try non-blocking statement
        end
        mbxds.put(datarx);
        $display("[DRV]: Data RCVD : %0d", datarx); 
        wait(vif.donerx == 1'b1);
        vif.rx <= 1'b1;
		->drvnext;
      end
    end
  endtask
  
endclass

class monitor;
  transaction tr;
  virtual uart_if vif;
  mailbox #(bit [7:0]) mbxms;
  
  bit [7:0] srx;
  bit [7:0] rrx;
  
  function new(mailbox #(bit [7:0]) mbxms);
    this.mbxms=mbxms;
  endfunction
  
  task run();
  forever begin
    @(posedge vif.uclktx);
    if((vif.newd==1'b1) && (vif.rx==1'b1)) begin
      @(posedge vif.uclktx);
      for(int i=0; i<=7;i++)begin
        @(posedge vif.uclktx);
        srx[i]=vif.tx;
        end
      $display("[MON] : DATA SEND on UART TX %0d", srx);
      @(posedge vif.uclktx);
      mbxms.put(srx);
    end
    else if ((vif.newd==1'b0) && (vif.rx==1'b0)) begin
      wait(vif.donerx==1);
      rrx=vif.doutrx;
      $display("[MON] : DATA RCVD RX %0d", rrx);
      @(posedge vif.uclktx); 
      mbxms.put(rrx);
    end
  end
  endtask
endclass

class scoreboard;
  transaction tr;
  event sconext;
  mailbox #(bit [7:0]) mbxms;
  mailbox #(bit [7:0]) mbxds;
  
  function new(mailbox #(bit [7:0]) mbxms, mailbox #(bit [7:0]) mbxds);
    this.mbxms=mbxms;
    this.mbxds=mbxds;
  endfunction
  
  bit[7:0] ds;
  bit[7:0] ms;
  
  task run();
    forever begin
      mbxms.get(ms);
      mbxds.get(ds);
      
      $display("[SCO] : DRV : %0d MON : %0d", ds, ms);
      if(ds==ms) begin
        $display("Data matched");
      end
      else begin
        $display("Data mismatch");
      end
      $display("-------------------------");
      ->sconext;
    end
    
  endtask
  
endclass

class environment;
  generator gen;
  driver drv;
  monitor mon;
  scoreboard sco;
  
  event nextgd;
  event nextgs;
  
  mailbox #(transaction) mbxgd;
  mailbox #(bit [7:0]) mbxds;
  mailbox #(bit [7:0]) mbxms;
  
  virtual uart_if vif;
  
  function new(virtual uart_if vif);
    mbxgd=new();
    mbxds=new();
    mbxms=new();
    
    gen=new(mbxgd);
    drv=new(mbxgd,mbxds);
    mon=new(mbxms);
    sco=new(mbxms,mbxds);
    
    this.vif = vif;
    drv.vif = this.vif;
    mon.vif = this.vif;
    
    gen.sconext=nextgs;
    gen.drvnext=nextgd;
    drv.drvnext=nextgd;
    sco.sconext=nextgs;

  endfunction
  
  task pre_test();
    drv.reset;
  endtask
  
  task test();
    fork
    gen.run();
    drv.run();
    mon.run();
    sco.run();
    join_any
  endtask
  
  task post_test();
    wait(gen.done.triggered);
    $finish();
  endtask
  
  task run();
    pre_test();
    test();
    post_test();
  endtask
  
  
endclass

module tb;
  
  uart_if vif();
  uart_top #(1000000, 9600) dut (vif.clk,vif.rst,vif.rx,vif.dintx,vif.newd,vif.tx,vif.doutrx,vif.donetx, vif.donerx);
  
  initial begin
    vif.clk<=0;
  end
  
  always #10 vif.clk<=~vif.clk;
  
  environment env;
  
  initial begin
    env = new(vif);
    env.gen.count=5;
    env.run();
  end
  
  initial begin
      $dumpfile("dump.vcd");
      $dumpvars;
    end
  
  assign vif.uclktx= dut.utx.uclk;
  assign vif.uclkrx = dut.rtx.uclk;
  
endmodule
